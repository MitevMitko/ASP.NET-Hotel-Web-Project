// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebProject.Infrastucture.Data;

#nullable disable

namespace WebProject.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230709144658_SeedRoomAndRoomRelatedTables")]
    partial class SeedRoomAndRoomRelatedTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.AboutInfo.AboutInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("AboutInfo");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.AboutInfo.AboutInfoImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AboutInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AboutInfoId");

                    b.ToTable("AboutInfoImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivityCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.ActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityCategories");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.ActivityImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Contact.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Landmark.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Landmark.LandmarkImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("LandmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LandmarkId");

                    b.ToTable("LandmarkImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserActivity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ApplicationUserActivity");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserLandmark", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LandmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "LandmarkId");

                    b.HasIndex("LandmarkId");

                    b.ToTable("ApplicationUsersLandmarks");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserRoom", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("ApplicationUserRoom");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserRoomService", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoomServiceId");

                    b.HasIndex("RoomServiceId");

                    b.ToTable("ApplicationUserRoomService");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.RoomFacility", b =>
                {
                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.HasKey("RoomId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("RoomsFacilities");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("c85bf0f6-0bbc-4eac-8944-115f6bafea9f"),
                            FacilityId = 1
                        },
                        new
                        {
                            RoomId = new Guid("c85bf0f6-0bbc-4eac-8944-115f6bafea9f"),
                            FacilityId = 2
                        },
                        new
                        {
                            RoomId = new Guid("acd6875f-a5ac-41ec-9b48-0d09655e01d9"),
                            FacilityId = 1
                        },
                        new
                        {
                            RoomId = new Guid("acd6875f-a5ac-41ec-9b48-0d09655e01d9"),
                            FacilityId = 3
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Bed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6622b98e-2130-4633-b227-23de72bc0021"),
                            IsDeleted = false,
                            TypeName = "King Bed"
                        },
                        new
                        {
                            Id = new Guid("7a644aea-e74a-49e2-baee-804a178a00b7"),
                            IsDeleted = false,
                            TypeName = "Queen Bed"
                        },
                        new
                        {
                            Id = new Guid("ce9a5733-71b4-4d67-b0cd-01e909031d12"),
                            IsDeleted = false,
                            TypeName = "Bunk Bed"
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Title = "TV"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Title = "Non-smoking room"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Title = "Smoking room"
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PricePerNigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoomAvailabilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("RoomAvailabilityId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c85bf0f6-0bbc-4eac-8944-115f6bafea9f"),
                            BedId = new Guid("6622b98e-2130-4633-b227-23de72bc0021"),
                            Description = "Luxury and cozy room on reasonable price per night.",
                            IsDeleted = false,
                            Name = "Hortensia",
                            PricePerNigth = 250m,
                            RoomAvailabilityId = new Guid("91520b6d-25f7-4a66-8650-e5644bc84a13"),
                            RoomTypeId = new Guid("9df60366-5ad5-42f7-8c3f-bf8e1e5bc01e")
                        },
                        new
                        {
                            Id = new Guid("acd6875f-a5ac-41ec-9b48-0d09655e01d9"),
                            BedId = new Guid("7a644aea-e74a-49e2-baee-804a178a00b7"),
                            Description = "Cozy and nice room on reasonable price per night.",
                            IsDeleted = false,
                            Name = "Mustang",
                            PricePerNigth = 100m,
                            RoomAvailabilityId = new Guid("91520b6d-25f7-4a66-8650-e5644bc84a13"),
                            RoomTypeId = new Guid("30f9c331-274c-4316-918a-0dcadaf7b8d9")
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomAvailability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomAvailabilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91520b6d-25f7-4a66-8650-e5644bc84a13"),
                            IsDeleted = false,
                            Type = "Available"
                        },
                        new
                        {
                            Id = new Guid("181d6778-82ea-423b-b2da-c58fe3f33cbf"),
                            IsDeleted = false,
                            Type = "Booked"
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30f9c331-274c-4316-918a-0dcadaf7b8d9"),
                            IsDeleted = false,
                            Name = "Economy"
                        },
                        new
                        {
                            Id = new Guid("9df60366-5ad5-42f7-8c3f-bf8e1e5bc01e"),
                            IsDeleted = false,
                            Name = "Luxury"
                        });
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoomServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RoomServiceSubCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RoomServiceCategoryId");

                    b.HasIndex("RoomServiceSubCategoryId");

                    b.ToTable("RoomServices");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomServiceCategories");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomServiceId");

                    b.ToTable("RoomServiceImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RoomServiceSubCategories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.AboutInfo.AboutInfoImage", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.AboutInfo.AboutInfo", "AboutInfo")
                        .WithMany("AboutInfoImages")
                        .HasForeignKey("AboutInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AboutInfo");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.Activity", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Activity.ActivityCategory", "ActivityCategory")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActivityCategory");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.ActivityImage", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Activity.Activity", "Activity")
                        .WithMany("ActivityImages")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Landmark.LandmarkImage", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Landmark.Landmark", "Landmark")
                        .WithMany("LandmarkImages")
                        .HasForeignKey("LandmarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Landmark");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserActivity", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Activity.Activity", "Activity")
                        .WithMany("ApplicationUsersActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("ApplicationUsersActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserLandmark", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Landmark.Landmark", "Landmark")
                        .WithMany("ApplicationUsersLandmarks")
                        .HasForeignKey("LandmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("ApplicationUsersLandmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Landmark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserRoom", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.Room", "Room")
                        .WithMany("ApplicationUsersRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("ApplicationUsersRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.ApplicationUserRoomService", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomService", "RoomService")
                        .WithMany("ApplicationUsersRoomServices")
                        .HasForeignKey("RoomServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("ApplicationUsersRoomServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.MappingTables.RoomFacility", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.Facility", "Facility")
                        .WithMany("RoomsFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.Room", "Room")
                        .WithMany("RoomsFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Room", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.Bed", "Bed")
                        .WithMany("Rooms")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.RoomAvailability", "RoomAvailability")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomAvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("RoomAvailability");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomImage", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.Room.Room", "Room")
                        .WithMany("RoomImages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomService", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceCategory", "RoomServiceCategory")
                        .WithMany("RoomServices")
                        .HasForeignKey("RoomServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceSubCategory", "RoomServiceSubCategory")
                        .WithMany()
                        .HasForeignKey("RoomServiceSubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomServiceCategory");

                    b.Navigation("RoomServiceSubCategory");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceImage", b =>
                {
                    b.HasOne("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomService", "RoomService")
                        .WithMany("RoomServiceImages")
                        .HasForeignKey("RoomServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomService");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.AboutInfo.AboutInfo", b =>
                {
                    b.Navigation("AboutInfoImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.Activity", b =>
                {
                    b.Navigation("ActivityImages");

                    b.Navigation("ApplicationUsersActivities");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Activity.ActivityCategory", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ApplicationUser.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUsersActivities");

                    b.Navigation("ApplicationUsersLandmarks");

                    b.Navigation("ApplicationUsersRoomServices");

                    b.Navigation("ApplicationUsersRooms");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Landmark.Landmark", b =>
                {
                    b.Navigation("ApplicationUsersLandmarks");

                    b.Navigation("LandmarkImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Bed", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Facility", b =>
                {
                    b.Navigation("RoomsFacilities");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.Room", b =>
                {
                    b.Navigation("ApplicationUsersRooms");

                    b.Navigation("RoomImages");

                    b.Navigation("RoomsFacilities");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomAvailability", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.Room.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomService", b =>
                {
                    b.Navigation("ApplicationUsersRoomServices");

                    b.Navigation("RoomServiceImages");
                });

            modelBuilder.Entity("WebProject.Infrastructure.Data.Models.ServiceRoom.RoomServiceCategory", b =>
                {
                    b.Navigation("RoomServices");
                });
#pragma warning restore 612, 618
        }
    }
}
